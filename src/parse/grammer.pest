main_module = { soi ~ import* ~ statement* ~ eoi }

import = { "(" ~ "import" ~ string ~ ")" }

statement = { def_function | let_variable | effect }
inner_statement = { def_function | let_variable }

effect = { ".."? ~ expression }

def_function = { "(" ~ "def" ~ "(" ~ name ~ signature ~ ")" ~ (inner_statement)* ~ expression ~ ")" }

signature = { half_signature ~ ("." ~ half_signature)? }
half_signature = { name* ~ optional_parameter* ~ rest_parameter? }
optional_parameter = { "(" ~ name ~ expression ~ ")" }
rest_parameter = { ".." ~ name }

let_variable = { "(" ~ "let" ~ name ~ expression ~ ")" }

expression = { boolean | dictionary | list | nil | number | string | name | application }

application = { "(" ~ expression ~ arguments ~ ")" }
arguments = { positional_arguments ~ ("." ~ keyword_arguments)? }
positional_arguments = { (expression | expanded_argument)* }
keyword_arguments = { (keyword_argument | expanded_argument)* }
keyword_argument = { name ~ expression }
expanded_argument = { ".." ~ expression }

anonymous_function = { "(" ~ "\\" ~ "(" ~ signature ~ ")" ~ expression ~ ")" }

match_expression = { "(" ~ "match" ~ expression ~ (pattern ~ expression)+ ~ ")" }
pattern = { boolean | nil | number | string | name }

list = { "[" ~ (expression | expanded_expression)* ~ "]" }
dictionary = { "{" ~ (key_value_pair | expanded_expression)* ~ "}" }
key_value_pair = { expression ~ expression }
expanded_expression = { ".." ~ expression }

boolean = { "true" | "false" }
nil = { "nil" }

number = @{ "-"? ~ integer ~ ("." ~ digit+)? }
integer = @{ "0" | head_digit ~ digit* }

string  = @{ "\"" ~ (escape | !("\"" | "\\") ~ any)* ~ "\"" }
escape  = @{ "\\" ~ ("\"" | "\\" | "n" | "r" | "t") }

name = @{ !"." ~ alphabet ~ (alphabet | digit)* }

alphabet = { !("(" | ")" | "[" | "]" | "{" | "}" | "\\" | "\"" | "$" | whitespace) ~ any }
digit = { '0'..'9' }
head_digit = { '1'..'9' }

whitespace = _{ " " | "\t" | "\r" | "\n" }
comment = _{ ";" ~ (!"\n" ~ any)* }
